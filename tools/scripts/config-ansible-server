#!/usr/bin/env /usr/bin/python
"""
Copyright (c) 2013, Juniper Networks, Inc.
All rights reserved.
Author : Michael Ganley

Ansible configuration wrapper script.
"""

import argparse
import os
import sys
import socket
import shlex
import subprocess
import shutil





class AnsibleConfigServer(object):
    """ Anisble Config class to parse and execute the build commands """

    def __init__(self, options):
        self.opt = options

        if not self.opt.remote_hostname:
            if not self.opt.remote_ip:
                print "Error: Need either a hostname or IP"
                sys.exit(1)

        if self.opt.remote_ip == '127.0.0.1':
           print 'Loopback IP invalid IP address'
           sys.exit(1)
        if self.opt.remote_hostname == "localhost":
           print 'Localhost is invalid hostname'
           sys.exit(1)

        if not self.opt.yml_file:
            print "No YML file specified"
            sys.exit(1)

        os.chdir ("ansible")
        if not os.path.isfile (self.opt.yml_file):
            print 'Cannot find specified YML file: %s' % self.opt.yml_file
            sys.exit(1)



    def config(self):
        """
        Now take care of stuff
        """
        global name
        if DEBUG:
            print 'DEBUG: config got called'

        print "Runnig ansible to configure remote host"
        command = "ansible-playbook " + self.opt.yml_file + " -i " + str(name)
        output = execute(command, ignore_errors=True)
        print output

        if not DEBUG:
            os.remove (name)



    def setup_host(self):

        """ Have to configure the ansible host file  """

        global name
        if self.opt.remote_hostname:
            entry = self.opt.remote_hostname
        else:
            entry = self.opt.remote_ip

        name = "/etc/ansible/hosts" + "." + str(os.getpid())

        f = open (str(name), 'w')
        f.write ('[contrail]\n')
        f.write (str(entry))
        f.close ()



def execute(command, ignore_errors=False):
    """ Function to execute shell command and return the output """

    if DEBUG:
        print 'DEBUG: %s' % (command)
    pipe = subprocess.Popen(shlex.split(command),
                            stdout=subprocess.PIPE,
                            stderr=subprocess.STDOUT,
                            close_fds=True)

    data = pipe.stdout.read()
    rc = pipe.wait()
    cwd = os.getcwd()
    if rc and not ignore_errors:
        print 'Error : Working directory : %s' % (cwd)
        print 'Error : Failed to execute command: %s\n%s' % (command, data)
        sys.exit(1)
    return data.strip()


def parse_options(args):
    """ Parse command line arguments """
    parser = argparse.ArgumentParser(description='Ansible wrapper script to configure VM ')

    parser.add_argument('-v', '--verbose', dest='debug', action='store_true',
                        help='Enable verbose mode')

    parser.add_argument('-r', '--remote',  nargs='?', dest='remote_hostname',
                        help='hostname to configure')

    parser.add_argument('-i', '--ip',  nargs='?', dest='remote_ip',
                        help='ip address to configure')

    parser.add_argument('-f', '--file',  nargs='?', dest='yml_file',
                        help='Ansible file to execute')

    parser.add_argument('-b', '--branch', nargs='?', dest='branch',
                        default='mainline',
                        help='Branch to get the source ansible files from, \n \
                        default : %(default)s')

    parser.add_argument('-n', '--number', nargs='?', dest='build_number',
                        help='Build number to get the source ansible files from \n \
                              default : %(default)s')

    subparsers = parser.add_subparsers(title='Config Ansible Server Commands',
                                       description='Select one command',
                                       dest='command')

    parser_config = subparsers.add_parser('config',
                                           description='Configures the target machine with the \
                                           packages necessary to build Contrail')

    opt = parser.parse_args(args)
    return opt


if __name__ == '__main__':
    options = parse_options(sys.argv[1:])
    DEBUG = options.debug
    config = AnsibleConfigServer(options)

    config.setup_host()

    if config.opt.command == 'config':
        config.config()
        sys.exit(0)

    print "Unknown command: ", config.opt.command
    sys.exit(1)
