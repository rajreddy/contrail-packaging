
#!/usr/bin/python

"""
Copyright (c) 2013, Juniper Networks, Inc.
All rights reserved.
Author : Michael Ganley

Figure out what to build.
"""
import argparse
from operator import index
import os
import re
import sys
import shlex
import subprocess
import shutil


class buildDir (object):
    def __init__(self, options):
        self.opt = options

    def parse(self):
        # Walk through directories looking for manifest files

        if DEBUG:
            print self.opt.path_name
        os.chdir (self.opt.path_name)
        f = open ('Build-Branch', 'r')


        branch = f.readline()

        while branch:
            branch = chomp(branch)
            if DEBUG:
                print branch
            files = [os.path.join(dirpath, filename)
            for (dirpath, dirs, files) in os.walk(branch)
            for filename in (dirs + files)]
            test = re.compile("\.xml", re.IGNORECASE)
            newfiles = filter(test.search, files)
            if DEBUG:
                print "XML files"
                print newfiles

            branch = f.readline()

def chomp(s):
    return s[:-1] if s.endswith('\n') else s


def execute(command, ignore_errors=False):
    """ Function to execute shell command and return the output """

    if DEBUG:
        print 'DEBUG: %s' % (command)
    pipe = subprocess.Popen(shlex.split(command),
                            stdout=subprocess.PIPE,
                            stderr=subprocess.STDOUT,
                            close_fds=True)

    data = pipe.stdout.read()
    rc = pipe.wait()
    cwd = os.getcwd()
    if rc and not ignore_errors:
        print 'Error : Working directory : %s' % (cwd)
        print 'Error : Failed to execute command: %s\n%s' % (command, data)
        sys.exit(1)
    return data.strip()

def cmd_exists(cmd):
    return subprocess.call("type " + cmd, shell=True,
        stdout=subprocess.PIPE, stderr=subprocess.PIPE) == 0


def parse_options(args):
    """ Parse command line arguments """
    parser = argparse.ArgumentParser(description='Contrail Create Build Archive script ')

    parser.add_argument('-v', '--verbose', dest='debug', action='store_true',
                        help='Enable verbose mode')

    parser.add_argument('-p', '--path', dest='path_name',
                        help="Full path to the manifest directory")

    subparsers = parser.add_subparsers(title='Fire off EC jobs based on the path to manifest file',
                                       description='Select one command',
                                       dest='command')

    parser_parse = subparsers.add_parser('parse',
                                           description='parse and execute build for manifest')
    opt = parser.parse_args(args)
    return opt


if __name__ == '__main__':
    options = parse_options(sys.argv[1:])
    DEBUG = options.debug
    build = buildDir(options)

    # Test to make sure all our commands exist

    if build.opt.command == 'parse':
        build.parse()
        sys.exit(0)

    print "Unknown command: ", build.opt.command
    sys.exit(1)



